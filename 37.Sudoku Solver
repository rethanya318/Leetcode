class Solution {
   public void solveSudoku(char[][] board) {
        if (sudoku(board, 0, 0)) {
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    System.out.print(board[i][j] + " ");
                }
                System.out.println();
            }
        }
    }

    public static boolean sudoku(char[][] board, int row, int col) {
        if (row == 9) {
            return true;
        }

        int nextRow = row, nextCol = col+1;
        if (col+1 == 9) {
            nextRow = row+1;
            nextCol = 0;
        }

        if (board[row][col] != '.') {
            return sudoku(board, nextRow, nextCol);
        }

        for (int digit = 1; digit <= 9; digit++) {
            char charDigit = (char) (digit + '0');
            if (isSafe(board, row, col, charDigit)) {
                board[row][col] = charDigit;
                if (sudoku(board, nextRow, nextCol)) {
                    return true;
                }
                board[row][col] = '.';
            }
        }

        return false;
    }

    public static boolean isSafe(char[][] board, int row, int col, char digit) {
        // Check the column
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == digit) {
                return false;
            }
        }
        // Check the row
        for (int j = 0; j < 9; j++) {
            if (board[row][j] == digit) {
                return false;
            }
        }
        // Check the 3x3 grid
        int sr = (row / 3) * 3;
        int sc = (col / 3) * 3;
        for (int i = sr; i < sr + 3; i++) {
            for (int j = sc; j < sc + 3; j++) {
                if (board[i][j] == digit) {
                    return false;
                }
            }
        }
        return true;
    }


}
