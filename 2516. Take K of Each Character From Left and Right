class Solution {
    public int takeCharacters(String s, int k) {
        int n = s.length();
        int[] count = new int[3];  
 
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }

       
        if (count[0] < k || count[1] < k || count[2] < k) {
            return -1;
        }

       
        int[] required = {count[0] - k, count[1] - k, count[2] - k};
        int left = 0, maxWindow = 0;
        int[] windowCount = new int[3]; // Count of characters inside the window

        // Sliding window to find the maximum valid window
        for (int right = 0; right < n; right++) {
            windowCount[s.charAt(right) - 'a']++;
            
            // Ensure window is valid
            while (windowCount[0] > required[0] ||
                   windowCount[1] > required[1] ||
                   windowCount[2] > required[2]) {
                windowCount[s.charAt(left) - 'a']--;
                left++;
            }

            // Update the maximum window length
            maxWindow = Math.max(maxWindow, right - left + 1);
        }

        // The answer is the length of the string minus the maximum valid window
        return n - maxWindow;
    }
}
